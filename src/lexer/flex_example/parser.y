%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern int yylex(void); /* Declaration for the lexer function generated by Flex. */
void yyerror(const char *s); /* Declaration for our error-reporting function. */
%}

/* Token declarations. These %token directives declare the names of the tokens that lexer (Flex) will return
Each token is assigned a unique numeric code by Bison (starting at 258 by default) so that the parser can distinguish between them.
They correspond to lexemes like "Map", "Room", operators like "->", and literals. */

/* Other tokens that don't have a value can remain untyped */
%token MAP ROOM CONNECT LIST STRING_TYPE BOOL_TYPE IDENTIFIER INT_TYPE ARROW BICONNECT LARROW 
%token EQ NE AND OR GE LE GT LT PLUS MINUS MULT DIV INT_LITERAL STRING_LITERAL
%token SEMICOLON LBRACE RBRACE LPAREN RPAREN

/* Specify the type for tokens that carry a string */
%type <stringVal> STRING_LITERAL
%type <stringVal> IDENTIFIER
%type <intVal> INT_LITERAL

/* Define the union for semantic values */
%union {
    int intVal;
    char* stringVal;
}

%%

/* Grammar Rules Section */

/* Our top-level rule: a program is a map declaration */
program:
    map_decl
    ;

/* A map declaration starts with MAP, followed by a string (the map name),
    a left curly brace, a sequence of statements, and a right curly brace */
map_decl:
    MAP STRING_LITERAL LBRACE map_body RBRACE
    ;

/* Map body: zero or more statements */
map_body:
    | map_body stmt
    ;

/* A statement can be a room declaration or a connect statement.
    (We can add more later as needed.) */
stmt:
        room_decl
    | connect_decl
    ;

/* Room declaration: e.g., Room "Entrance"; */
room_decl:
    ROOM STRING_LITERAL SEMICOLON {
        printf("Parsed room: %s\n", $2);
    }
    ;


/* Connect declaration: e.g., connect "Entrance" -> "Hallway"; */
connect_decl:
    CONNECT STRING_LITERAL ARROW STRING_LITERAL SEMICOLON {
        printf("Parsed connection: %s %s %s\n", $2, "->", $4);
    }
    ;

%%

/* User Code Section */
int main(void) {
    printf("Starting parser...\n");
    yyparse();
    return 0;
}

void yyerror(const char *s) {
    fprintf(stderr, "Parse error: %s\n", s);
}
